5)
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/ParamServlet")
public class ParamServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    @Override
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // Set response content type
        response.setContentType("text/html");

        // Retrieve ServletConfig parameter
        ServletConfig config = getServletConfig();
        String servletParam = config.getInitParameter("servletParam");

        // Retrieve ServletContext parameter
        ServletContext context = getServletContext();
        String contextParam = context.getInitParameter("contextParam");

        // Create response HTML
        PrintWriter out = response.getWriter();
        out.println("<html><body>");
        out.println("<h2>Servlet Configuration Parameters</h2>");
        out.println("<p><strong>Servlet Parameter:</strong> " + servletParam + "</p>");
        out.println("<p><strong>Context Parameter:</strong> " + contextParam + "</p>");
        out.println("</body></html>");
    }
}

1)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <title>Advanced CSS Features</title>
</head>
<body>
    <header>
        <nav>
            <ul>
                <li><a href="#">Home</a></li>
                <li><a href="#">About</a></li>
                <li><a href="#">Services</a></li>
                <li><a href="#">Contact</a></li>
            </ul>
        </nav>
    </header>
    
    <main>
        <h1>Welcome to My Webpage</h1>
        <div class="grid-container">
            <div class="grid-item">Item 1</div>
            <div class="grid-item">Item 2</div>
            <div class="grid-item">Item 3</div>
            <div class="grid-item">Item 4</div>
            <div class="grid-item">Item 5</div>
            <div class="grid-item">Item 6</div>
        </div>
    </main>

    <footer>
        <p>&copy; 2024 My Webpage</p>
    </footer>
</body>
</html>
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
}

header {
    background-color: #333;
    color: white;
    padding: 1em 0;
}

nav ul {
    display: flex;
    justify-content: center;
    list-style-type: none;
}

nav ul li {
    margin: 0 15px;
}

nav ul li a {
    color: white;
    text-decoration: none;
    transition: color 0.3s ease;
}

nav ul li a:hover {
    color: #ff6347;
}

main {
    text-align: center;
    padding: 2em 0;
}

.grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1em;
    padding: 1em;
}

.grid-item {
    background-color: #ffffff;
    padding: 1em;
    border-radius: 5px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.grid-item:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    animation: bounce 0.5s forwards;
}

@keyframes bounce {
    0% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(-10px);
    }
    100% {
        transform: translateY(0);
    }
}

footer {
    text-align: center;
    padding: 1em 0;
    background-color: #333;
    color: white;
}

2)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <title>Responsive Webpage with Bootstrap</title>
</head>
<body>
    <header class="bg-dark text-white text-center py-3">
        <nav class="navbar navbar-expand-lg navbar-dark">
            <a class="navbar-brand" href="#">My Webpage</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav ml-auto">
                    <li class="nav-item"><a class="nav-link" href="#">Home</a></li>
                    <li class="nav-item"><a class="nav-link" href="#">About</a></li>
                    <li class="nav-item"><a class="nav-link" href="#">Services</a></li>
                    <li class="nav-item"><a class="nav-link" href="#">Contact</a></li>
                </ul>
            </div>
        </nav>
    </header>
    
    <main class="container text-center my-5">
        <h1>Welcome to My Webpage</h1>
        <div class="row">
            <div class="col-md-4 mb-4">
                <div class="card shadow-sm hover-card">
                    <div class="card-body">
                        <h5 class="card-title">Item 1</h5>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card shadow-sm hover-card">
                    <div class="card-body">
                        <h5 class="card-title">Item 2</h5>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card shadow-sm hover-card">
                    <div class="card-body">
                        <h5 class="card-title">Item 3</h5>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card shadow-sm hover-card">
                    <div class="card-body">
                        <h5 class="card-title">Item 4</h5>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card shadow-sm hover-card">
                    <div class="card-body">
                        <h5 class="card-title">Item 5</h5>
                    </div>
                </div>
            </div>
            <div class="col-md-4 mb-4">
                <div class="card shadow-sm hover-card">
                    <div class="card-body">
                        <h5 class="card-title">Item 6</h5>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <footer class="bg-dark text-white text-center py-3">
        <p>&copy; 2024 My Webpage</p>
    </footer>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
.hover-card {
    transition: transform 0.3s ease;
}

.hover-card:hover {
    transform: scale(1.05);
}



8)
import java.util.*;
import java.io.*;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.*;
public class ex{
    public static void main(String[] args) throws Exception
    {
        try{
            Class.forName("oracle.jdbc.driver.OracleDriver");
            System.out.println("class loaded");
            Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE" , "system" , "system");
            System.out.println("Connection Created");
            Statement st=con.createStatement();
            System.out.println("Stmt created");
            int i=st.executeUpdate("insert into sofi values('Sofi' , 43)");
            System.out.println("Query executed");
            st.close();
            con.close();
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }

}
9)
import java.sql.*;

public class pcstmt {
    // Database connection details
    private static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:XE";
    private static final String USER = "system";
    private static final String PASS = "system";

    public static void main(String[] args) {
        Connection con = null;
        PreparedStatement pstmt = null;

        try {
            // Load JDBC driver
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE" , "system" , "system");
            System.out.println("Connection established.");

            // Using PreparedStatement for INSERT
            String insertSQL = "INSERT INTO employees (id, name, salary) VALUES (?, ?, ?)";
            pstmt = con.prepareStatement(insertSQL);
            pstmt.setInt(1, 101);
            pstmt.setString(2, "Alice");
            pstmt.setDouble(3, 5000.00);
            int rowsInserted = pstmt.executeUpdate();
            System.out.println("Rows inserted: " + rowsInserted);
            pstmt.close();

            // Using PreparedStatement for UPDATE
            String updateSQL = "UPDATE employees SET salary = ? WHERE id = ?";
            pstmt = con.prepareStatement(updateSQL);
            pstmt.setDouble(1, 5500.00);
            pstmt.setInt(2, 101);
            int rowsUpdated = pstmt.executeUpdate();
            System.out.println("Rows updated: " + rowsUpdated);
            pstmt.close();

            // Using PreparedStatement for DELETE
            String deleteSQL = "DELETE FROM employees WHERE id = ?";
            pstmt = con.prepareStatement(deleteSQL);
            pstmt.setInt(1, 101);
            int rowsDeleted = pstmt.executeUpdate();
            System.out.println("Rows deleted: " + rowsDeleted);
            pstmt.close();

            // Using PreparedStatement to get the count of employees
            String countSQL = "SELECT COUNT(*) FROM employees";
            pstmt = con.prepareStatement(countSQL);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                int employeeCount = rs.getInt(1);
                System.out.println("Total employees: " + employeeCount);
            }
            rs.close();
            pstmt.close();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Clean up resources
            try {
                if (pstmt != null) pstmt.close();
                if (con != null) con.close();
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
    }
}

10)
import java.sql.*;

public class usrs{
    // Database connection details
    private static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:XE";
    private static final String USER = "system";
    private static final String PASS = "system";

    public static void main(String[] args) {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {
            // Load JDBC driver and establish connection
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE" , "system" , "system");
            System.out.println("Connection established.");

            // Create a Statement with scrollable and updatable capabilities
            stmt = con.createStatement(
                ResultSet.TYPE_SCROLL_INSENSITIVE, 
                ResultSet.CONCUR_UPDATABLE
            );

            // Execute query and obtain a scrollable and updatable ResultSet
            String query = "SELECT id, name, salary FROM employees";
            rs = stmt.executeQuery(query);

            // Scroll to the first row and display data
            if (rs.first()) {
                System.out.println("First Row - ID: " + rs.getInt("id") + 
                                   ", Name: " + rs.getString("name") + 
                                   ", Salary: " + rs.getDouble("salary"));
            }

            // Move to the last row and display data
            if (rs.last()) {
                System.out.println("Last Row - ID: " + rs.getInt("id") + 
                                   ", Name: " + rs.getString("name") + 
                                   ", Salary: " + rs.getDouble("salary"));
            }

            // Move to the second row, update salary, and commit the change
            if (rs.absolute(2)) {
                System.out.println("\nUpdating salary in the second row:");
                double newSalary = rs.getDouble("salary") + 1000.00;
                rs.updateDouble("salary", newSalary);
                rs.updateRow();  // Update the row in the database
                System.out.println("Row updated - New Salary: " + newSalary);
            }

            // Insert a new row
            System.out.println("\nInserting a new row:");
            rs.moveToInsertRow();
            rs.updateInt("id", 105);
            rs.updateString("name", "New Employee");
            rs.updateDouble("salary", 3000.00);
            rs.insertRow();  // Insert the new row into the database
            System.out.println("New row inserted.");

            // Delete the last row in the ResultSet
            if (rs.last()) {
                System.out.println("\nDeleting the last row - ID: " + rs.getInt("id"));
                rs.deleteRow();
                System.out.println("Last row deleted.");
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Clean up resources
            try {
                if (rs != null) rs.close();
                if (stmt != null) stmt.close();
                if (con != null) con.close();
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
    }
}

12)
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Form Submission</title>
</head>
<body>
    <h2>Enter Your Details</h2>
    <form action="reqform" method="post">
        <label for="name">Name:</label>
        <input type="text" id="name" name="name"><br><br>
        
        <label for="age">Age:</label>
        <input type="number" id="age" name="age"><br><br>
        
        <label for="email">Email:</label>
        <input type="email" id="email" name="email"><br><br>
        
        <input type="submit" value="Submit">
    </form>
</body>
</html>


import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

//@WebServlet("/FormServlet")
public class reqform extends HttpServlet {
    private static final long serialVersionUID = 1L;

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // Set response content type
        response.setContentType("text/html");

        // Retrieve form parameters
        String name = request.getParameter("name");
        String age = request.getParameter("age");
        String email = request.getParameter("email");

        // Create response HTML
        PrintWriter out = response.getWriter();
        out.println("<html><body>");
        out.println("<h2>Form Submission Details</h2>");
        out.println("<p><strong>Name:</strong> " + name + "</p>");
        out.println("<p><strong>Age:</strong> " + age + "</p>");
        out.println("<p><strong>Email:</strong> " + email + "</p>");
        out.println("</body></html>");
    }

    // Handle GET request if needed (optional)
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        doPost(request, response);
    }
}


<web-app>
    <servlet>
        <servlet-name>reqform</servlet-name>
        <servlet-class>reqform</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>reqform</servlet-name>
        <url-pattern>/FormServlet</url-pattern>
    </servlet-mapping>
</web-app>


13)
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/ParamServlet")
public class ParamServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    @Override
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // Set response content type
        response.setContentType("text/html");

        // Retrieve ServletConfig parameter
        ServletConfig config = getServletConfig();
        String servletParam = config.getInitParameter("servletParam");

        // Retrieve ServletContext parameter
        ServletContext context = getServletContext();
        String contextParam = context.getInitParameter("contextParam");

        // Create response HTML
        PrintWriter out = response.getWriter();
        out.println("<html><body>");
        out.println("<h2>Servlet Configuration Parameters</h2>");
        out.println("<p><strong>Servlet Parameter:</strong> " + servletParam + "</p>");
        out.println("<p><strong>Context Parameter:</strong> " + contextParam + "</p>");
        out.println("</body></html>");
    }
}


